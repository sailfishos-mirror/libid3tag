/** @page usage General Usage Notes
 *
 * This page contains general usage notes on using the library. Keep these
 * notes in mind as you read the rest of the documentation.
 *
 * @section usage_naming_conventions Naming Conventions
 * Functions and strutures follow the following naming convention:
 * `id3_group_[name]`, where
 *
 *   - `group` represents what group the symbol is related to (see @ref
 *     usage_groups for a list of all possible groups).
 *   - `[name]` represents the function's name if the symbol is a function
 *     (e.g., `setint`).
 *
 * Symbols of the form `id3_group` are simply structs. For example, `id3_tag`
 * is a struct, while `id3_tag_addref` is a function. In `id3_tag_addref`:
 *   - `group` is `tag`, so this is related to ID3 tags.
 *   - `[name]` is `addref`. (This is a function).
 *
 * @subsection usage_groups
 * Referring back to earlier, `group` can be one of the following:
 *
 *   - `field`
 *   - `frame`
 *   - `genre`
 *   - `latin1`
 *   - `tag`
 *   - `ucs4`
 *   - `utf8`
 *   - `utf16`
 *
 * @section usage_memory_allocations Memory Allocations
 * @subsection usage_allocating_structures Where to Allocate Structures
 * All structures __must__ be allocated on the heap. __Never allocate them on
 * the stack__.
 *
 * Use the appropriate `id3_XXXX_new()` function to allocate structures.
 * __Never manually allocate the structure yourself__.
 *
 * @subsection usage_references References
 * Most structs in libid3tag can be reference counted. If a struct `somestruct`
 * has corresponding `id3_somestruct_addref` and `id3_somestruct_delref`
 * functions, it is reference countable. (Those functions increment and
 * decrement the reference counter, respectively).
 *
 * You are solely responsible for ensuring all references to a struct are
 * cleaned up before deleting a frame. Deleting a reference counted structure
 * (i.e., calling `id3_XXXX_delete()`) will NEITHER deallocate it nor decrease
 * its reference count.
 *
 **/